/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
    id 'java'
}



repositories {
    mavenCentral()
    maven {
        url = uri('https://www.javaxt.com/maven')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    shadow 'javaxt:javaxt-core:1.10.6'
    runtimeOnly 'javaxt:javaxt-core:1.10.6'
    shadow 'javaxt:javaxt-server:4.0.1'
    runtimeOnly 'javaxt:javaxt-server:4.0.1'
    shadow 'javaxt:javaxt-express:1.1.1'
    runtimeOnly 'javaxt:javaxt-express:1.1.1'
    shadow 'com.h2database:h2:1.4.197'
    runtimeOnly 'com.h2database:h2:1.4.197'
    shadow 'org.locationtech.jts:jts-core:1.17.1'
    runtimeOnly 'org.locationtech.jts:jts-core:1.17.1'
    shadow 'me.xdrop:fuzzywuzzy:1.3.1'
    runtimeOnly 'me.xdrop:fuzzywuzzy:1.3.1'
    shadow 'org.neo4j.driver:neo4j-java-driver:4.2.0'
    runtimeOnly 'org.neo4j.driver:neo4j-java-driver:4.2.0'
    shadow 'com.google.code.gson:gson:2.8.6'
    runtimeOnly 'com.google.code.gson:gson:2.8.6'
    shadow 'javax.vecmath:vecmath:1.5.2'
    runtimeOnly 'javax.vecmath:vecmath:1.5.2'
    shadow 'org.jgrapht:jgrapht-core:1.0.0'
    runtimeOnly 'org.jgrapht:jgrapht-core:1.0.0'
    shadow 'com.github.jsqlparser:jsqlparser:4.1'
    runtimeOnly 'com.github.jsqlparser:jsqlparser:4.1'
    shadow 'org.mozilla:rhino:1.7.13'
    runtimeOnly 'org.mozilla:rhino:1.7.13'

    testImplementation 'junit:junit:4.13.1'
    testRuntimeOnly 'junit:junit:4.13.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter:5.7.0'
}

group = 'bluewave'
version = '1.0.0'
description = 'bluewave'
java.sourceCompatibility = JavaVersion.VERSION_1_8

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'lmohseni-smc'
        property 'sonar.projectKey', 'lmohseni-smc_BlueWave'
        property 'sonar.sources', 'src/main/,web/'
        property 'sonar.exclusions', 'src/test/**/*,web/lib/**/*,web/data/**/*'
    }
}

jar {
    archiveBaseName = 'bluewave'
    archiveVersion =  '0.1.0'
    manifest {
        attributes 'Main-Class': 'bluewave.Main'
    }
}

shadowJar {
    archiveBaseName.set('bluewave')
    archiveClassifier.set('')
    archiveVersion.set('')
}


task run(type:Exec) {
    dependsOn shadowJar
    workingDir '.'
    commandLine  './bin/run-server.sh'
}


task cleanExplodedJar(type: Delete) {
    delete  'LICENSE.txt', 'META-INF/', 'bluewave.jar',  'jetty-logging.properties',
            'javaxt-core.dll', 'javaxt-core64.dll'
    delete  'bluewave/', 'com/', 'javax/', 'javaxt/', 'net/', 'org/', 'me/'
}
run.finalizedBy cleanExplodedJar

tasks.register('list') {
    dependsOn configurations.runtimeClasspath
    doLast {
        println "runtimeClasspath = ${configurations.runtimeClasspath.collect { File file -> file.name }}"
    }
}
